{"version":3,"sources":["generic.js"],"names":["Rainbow","extend","matches","1","name","pattern","2"],"mappings":"AAKAA,QAAQC,OAAO,UAAW,CACtB,CACIC,QAAS,CACLC,EAAG,CACC,CACIC,KAAM,mBACNC,QAAS,UAEb,CACID,KAAM,cACNC,QAAS,QAGjBC,EAAG,CACCF,KAAM,SACNF,QAAS,CACLE,KAAM,4BACNC,QAAS,iBAIrBA,QAAS,0DAEb,CACID,KAAM,UACNC,QAAS,+DAEb,CACID,KAAM,mBACNC,QAAS,uDAEb,CACIH,QAAS,CACLC,EAAG,WAEPE,QAAS,sUAEb,CACID,KAAM,oBACNC,QAAS,oBAEb,CACID,KAAM,mBACNC,QAAS,oCAEb,CACIH,QAAS,CACLC,EAAG,iBAEPE,QAAS,iBAEb,CACIH,QAAS,CACLC,EAAG,mBACHG,EAAG,wBAEPD,QAAS","file":"generic.js","sourcesContent":["    /**\n * Generic language patterns\n *\n * @author Craig Campbell\n */\nRainbow.extend('generic', [\n    {\n        matches: {\n            1: [\n                {\n                    name: 'keyword.operator',\n                    pattern: /\\=|\\+/g\n                },\n                {\n                    name: 'keyword.dot',\n                    pattern: /\\./g\n                }\n            ],\n            2: {\n                name: 'string',\n                matches: {\n                    name: 'constant.character.escape',\n                    pattern: /\\\\('|\"){1}/g\n                }\n            }\n        },\n        pattern: /(\\(|\\s|\\[|\\=|:|\\+|\\.|\\{|,)(('|\")([^\\\\\\1]|\\\\.)*?(\\3))/gm\n    },\n    {\n        name: 'comment',\n        pattern: /\\/\\*[\\s\\S]*?\\*\\/|(\\/\\/|\\#)(?!.*('|\").*?[^:](\\/\\/|\\#)).*?$/gm\n    },\n    {\n        name: 'constant.numeric',\n        pattern: /\\b(\\d+(\\.\\d+)?(e(\\+|\\-)?\\d+)?(f|d)?|0x[\\da-f]+)\\b/gi\n    },\n    {\n        matches: {\n            1: 'keyword'\n        },\n        pattern: /\\b(and|array|as|b(ool(ean)?|reak)|c(ase|atch|har|lass|on(st|tinue))|d(ef|elete|o(uble)?)|e(cho|lse(if)?|xit|xtends|xcept)|f(inally|loat|or(each)?|unction)|global|if|import|int(eger)?|long|new|object|or|pr(int|ivate|otected)|public|return|self|st(ring|ruct|atic)|switch|th(en|is|row)|try|(un)?signed|var|void|while)(?=\\b)/gi\n    },\n    {\n        name: 'constant.language',\n        pattern: /true|false|null/g\n    },\n    {\n        name: 'keyword.operator',\n        pattern: /\\+|\\!|\\-|&(gt|lt|amp);|\\||\\*|\\=/g\n    },\n    {\n        matches: {\n            1: 'function.call'\n        },\n        pattern: /(\\w+?)(?=\\()/g\n    },\n    {\n        matches: {\n            1: 'storage.function',\n            2: 'entity.name.function'\n        },\n        pattern: /(function)\\s(.*?)(?=\\()/g\n    }\n]);\n"]}